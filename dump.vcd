$date
	Tue Sep 17 21:27:38 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fp16adder $end
$var wire 16 ! a [15:0] $end
$var wire 16 " b [15:0] $end
$var reg 1 # cout $end
$var reg 6 $ exponent [5:0] $end
$var reg 5 % exponentA [4:0] $end
$var reg 5 & exponentB [4:0] $end
$var reg 11 ' fraction [10:0] $end
$var reg 11 ( fractionA [10:0] $end
$var reg 11 ) fractionB [10:0] $end
$var reg 10 * mantissa [9:0] $end
$var reg 8 + shiftAmount [7:0] $end
$var reg 1 , sign $end
$var reg 16 - z [15:0] $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 -
z,
bx +
bx *
b10000000000 )
b10000000000 (
bx '
b10000 &
b10000 %
b10000 $
x#
b100000000000000 "
b1100000000000000 !
$end
#2000
b100001000000000 -
b1000000000 *
0,
0#
b11000000000 '
b1000000000 (
b1 +
b10000 $
b1111 %
b11110000000000 !
#4000
b100000000000000 -
b0 *
0#
b10000000000 '
b10000 $
b10000000000 (
b1111 &
b11110000000000 "
#6000
b1100010000000000 -
1,
b10001 $
0#
b10000000000 '
b10000 &
b10000 %
b1100000000000000 "
b1100000000000000 !
#8000
b1011110001100110 -
b1100110 *
b10001100110 '
b1111 $
b1011001101 )
b10100000000 (
b1111 &
b11110110011010 "
b1100000100000000 !
#10000
b11111000000000 -
b1000000000 *
0,
b11000000000 '
b1111 $
b1000000000 )
b1011110000000000 "
b100000100000000 !
#12001
